# End-to-end interception tests using containers.
# Prefers podman compose/podman-compose, but also compatible with docker compose.

services:
  proxy:
    build:
      context: ../..
      dockerfile_inline: |
        FROM golang:1.24-alpine AS builder
        RUN apk add --no-cache git make gcc musl-dev sqlite-dev
        WORKDIR /src
        COPY go.mod go.sum ./
        RUN go install github.com/a-h/templ/cmd/templ@latest
        RUN go mod download
        COPY . .
        RUN templ generate
        RUN CGO_ENABLED=1 go build -ldflags='-s -w' -o /out/msgtausch .

        FROM alpine:3.19 AS runtime-release
        RUN apk add --no-cache ca-certificates tzdata
        RUN adduser -D -H app
        USER app
        COPY --from=builder /out/msgtausch /msgtausch
        COPY tests/compose-intercept-stats/proxy-config.json /config/config.json
        COPY tests/compose-intercept-stats/ca /ca
        ENTRYPOINT ["/msgtausch"]
      target: runtime-release
    image: msgtausch:test
    command: ["-config", "/config/config.json", "-debug"]
    environment:
      - MSGTAUSCH_LOG_LEVEL=debug
      - MSGTAUSCH_SERVERS__0__LISTEN_ADDRESS=0.0.0.0:8080
      - MSGTAUSCH_SERVERS__0__TYPE=standard
      - MSGTAUSCH_SERVERS__0__ENABLED=true
      - MSGTAUSCH_INTERCEPTION__ENABLED=true
      - MSGTAUSCH_INTERCEPTION__HTTP=true
      - MSGTAUSCH_INTERCEPTION__HTTPS=true
      - MSGTAUSCH_INTERCEPTION__CA_FILE=/ca/test_ca.crt
      - MSGTAUSCH_INTERCEPTION__CA_KEY_FILE=/ca/test_ca.key
      - SSL_CERT_FILE=/ca/test_ca.crt
    ports:
      - "8080:8080"
    networks:
      - msgtausch-intercept-test

  http-backend:
    build:
      context: .
      dockerfile_inline: |
        FROM golang:1.24-alpine AS builder
        RUN apk add --no-cache git make gcc musl-dev sqlite-dev
        WORKDIR /src
        COPY backend/go.mod ./
        COPY backend/server.go ./
        RUN --mount=type=cache,target=/go/pkg/mod \
            --mount=type=cache,target=/root/.cache/go-build \
            CGO_ENABLED=0 go build -o /out/backend ./server.go

        FROM alpine:3.19
        RUN apk add --no-cache wget ca-certificates \
            && adduser -D -H app
        USER app
        COPY --from=builder /out/backend /backend
        COPY ca /ca
        ENV PORT=5678
        ENV TLS=false
        EXPOSE 5678 8443
        ENTRYPOINT ["/backend"]
    image: msgtausch-test-backend:local
    environment:
      - PORT=5678
      - TLS=false
      - SSL_CERT_FILE=/ca/test_ca.crt
    expose:
      - "5678"
    healthcheck:
      test:
        ["CMD-SHELL", "wget -qO- http://127.0.0.1:5678/ | grep -q hello-http"]
      interval: 1s
      timeout: 2s
      retries: 30
      start_period: 1s
    networks:
      - msgtausch-intercept-test

  https-backend:
    build:
      context: .
      dockerfile_inline: |
        FROM golang:1.24-alpine AS builder
        RUN apk add --no-cache git make gcc musl-dev sqlite-dev
        WORKDIR /src
        COPY backend/go.mod ./
        COPY backend/server.go ./
        RUN --mount=type=cache,target=/go/pkg/mod \
            --mount=type=cache,target=/root/.cache/go-build \
            CGO_ENABLED=1 go build -o /out/backend ./server.go

        FROM alpine:3.19
        RUN apk add --no-cache wget ca-certificates \
            && adduser -D -H app
        USER app
        COPY --from=builder /out/backend /backend
        COPY ca /ca
        ENV PORT=8443
        ENV TLS=true
        EXPOSE 5678 8443
        ENTRYPOINT ["/backend"]
    image: msgtausch-test-backend-https:local
    environment:
      - PORT=8443
      - TLS=true
      - SSL_CERT_FILE=/ca/test_ca.crt
      - CA_CERT_FILE=/ca/test_ca.crt
      - CA_KEY_FILE=/ca/test_ca.key
    expose:
      - "8443"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-check-certificate -qO- https://127.0.0.1:8443/ | grep -q hello-https",
        ]
      interval: 1s
      timeout: 2s
      retries: 60
      start_period: 1s
    networks:
      - msgtausch-intercept-test

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_DB=msgtausch_stats
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - msgtausch-intercept-test

  client:
    build:
      context: .
      dockerfile_inline: |
        FROM curlimages/curl:8.8.0
        COPY client/test.sh /test.sh
        COPY ca /ca
        ENTRYPOINT ["sh", "/test.sh"]
    image: msgtausch-test-client:local
    depends_on:
      proxy:
        condition: service_started
      http-backend:
        condition: service_healthy
      https-backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - HTTP_PROXY=http://proxy:8080
      - HTTPS_PROXY=http://proxy:8080
      - NO_PROXY=localhost,127.0.0.1
      - SSL_CERT_FILE=/ca/test_ca.crt
    networks:
      - msgtausch-intercept-test

networks:
  msgtausch-intercept-test:
    name: msgtausch-intercept-test
    external: false
